program new;
const
UsingLinux := False;
ToggleSleepBonus := true;
DoLockpicking := true;


var

BitmapsFolderLinux := "Scripts/WurmBitmaps/";
BitmapsFolderWindows := "Scripts\WurmBitmaps\";

WurmLogsFolderWindows := "C:\Users\Theino\wurm\players\Usmaan\logs\";
WurmLogsFolderLinux := "";

BitmapsFolder : String;
WurmLogsFolder : String;

LeatherIcon : Int32;
LeatherKnifeIcon : Int32;
MalletIcon : Int32;
NeedleIcon : Int32;
AwlIcon : Int32;

FullEnergyBar : Int32;
ToolBeltLeather : Int32;
InventoryTitle : Int32;
ActiveActionBar : Int32;
ZeroPointZeroZero : Int32;
Leather : Int32;
LeatherHideOnToolBelt : Int32;
LeatherHideOnToolBeltHighlighted : Int32;
QLTitle : Int32;
HighlightedLeatherStack : Int32;
BulkStorageBinTitle : Int32;
StartOfToolBelt : Int32;
FirstHalfOfStamina : Int32;
ToolBeltLeatherRare : Int32;
LeatherBelt : Int32;
Drink : Int32;
WaterHighlighted : Int32;
Saddle : Int32;
LeatherBoot : Int32;
LeatherGlove : Int32;
LeatherJacket : Int32;
LeatherPants : Int32;
LeatherSleeve : Int32;
LeatherCap : Int32;
LeatherBarding : Int32;
SmallChest : Int32;
SmallChestHighlighted : Int32;
PickLock : Int32;
TextInput : Int32;
SmallPadlock : Int32;
AttachLock : Int32;


foundInventoryTitle : Boolean;
foundToolBeltLeather : Boolean;
foundToolBeltLeatherRare : Boolean;
foundLeatherBelt : Boolean;
foundIcon : Boolean;
foundNoDmg : Boolean;
foundLeather : Boolean;
foundQLTitle : Boolean;
foundSaddle : Boolean;
foundTemp : Boolean;

xInventoryLocation : Integer;
yInventoryLocation : Integer;

xIconLocation : Integer;
yIconLocation : Integer;

xToolBeltLeatherLocation : Integer;
yToolBeltLeatherLocation : Integer;
xToolBeltLeatherRareLocation : Integer;
yToolBeltLeatherRareLocation : Integer;
xLeatherBeltLocation : Integer;
yLeatherBeltLocation : Integer;
xSaddleLocation : Integer;
ySaddleLocation : Integer;

xLeatherLocation : Integer;
yLeatherLocation : Integer;

xBulkStorageBinLocation : Integer;
yBulkStorageBinLocation : Integer;

xTemp : Integer;
yTemp : Integer;

xToolBeltLocation : Integer;
yToolBeltLocation : Integer;

xWater : Integer;
yWater : Integer;

xDrink : Integer;
yDrink : Integer;

xQLTitle : Integer;
yQLTitle : Integer;

xSmallChest : Integer;
ySmallChest : Integer;

xPickLock : Integer;
yPickLock : Integer;

clientWidth : Integer;
clientHeight : Integer;

i : Integer;
waterCounter : Integer;

FoundFirstHalfOfStamina : Boolean;
FoundActiveActionBar : Boolean;
FoundHighlightedWater : Boolean;
FoundDrink : Boolean;

EventFile : Integer;
SkillsFile : Integer;

RecentSkillsString : String;

LastLockpicked : TDateTime;

LockpickingSkillGainedPos : Integer;

TimeOfLockpickingString : String;

HourTemp, MinTemp, SecTemp, MilliSecTemp : Uint16;

SecondsSinceLockpicked : Integer;

FoundSmallChest : Boolean;
FoundPickLock : Boolean;
FoundTextInput : Boolean;
FoundEnergyBar : Boolean;
HasLockpickingTimerSet : Boolean;

NoLockpickSkillGain : Boolean;
SleepBonusUsing : Boolean;




begin
  GetClientDimensions(clientWidth, clientHeight);
  clientWidth -= 1;
  clientHeight -= 1;

  if UsingLinux then
  begin
    BitmapsFolder := BitmapsFolderLinux;
    WurmLogsFolder := WurmLogsFolderLinux;
  end else
  begin
    BitmapsFolder := BitmapsFolderWindows;
    WurmLogsFolder := WurmLogsFolderWindows;
  end;

  LeatherIcon := LoadBitmap(BitmapsFolder + "LeatherIcon.bmp");
  LeatherKnifeIcon := LoadBitmap(BitmapsFolder + "LeatherKnifeIcon.bmp");
  MalletIcon := LoadBitmap(BitmapsFolder + "MalletIcon.bmp");
  NeedleIcon := LoadBitmap(BitmapsFolder + "NeedleIcon.bmp");
  AwlIcon := LoadBitmap(BitmapsFolder + "AwlIcon.bmp");

  FullEnergyBar := LoadBitmap(BitmapsFolder + "FullEnergyBar.bmp");
  ToolBeltLeather := LoadBitmap(BitmapsFolder + "ToolBeltLeather.bmp");
  InventoryTitle := LoadBitmap(BitmapsFolder + "InventoryTitle.bmp");
  ActiveActionBar := LoadBitmap(BitmapsFolder + "ActiveActionBar.bmp");
  ZeroPointZeroZero := LoadBitmap(BitmapsFolder + "ZeroPointZeroZero.bmp");
  Leather := LoadBitmap(BitmapsFolder + "leather.bmp");
  LeatherHideOnToolBelt := LoadBitmap(BitmapsFolder + "LeatherHideOnToolBelt.bmp");
  LeatherHideOnToolBeltHighlighted := LoadBitmap(BitmapsFolder + "LeatherHideOnToolBeltHighlighted.bmp");
  QLTitle := LoadBitmap(BitmapsFolder + "QLTitle.bmp");
  HighlightedLeatherStack := LoadBitmap(BitmapsFolder + "HighlightedLeatherStack.bmp");
  BulkStorageBinTitle := LoadBitmap(BitmapsFolder + "BulkStorageBinTitle.bmp");
  StartOfToolBelt := LoadBitmap(BitmapsFolder + "StartOfToolBelt.bmp");
  FirstHalfOfStamina := LoadBitmap(BitmapsFolder + "FirstHalfOfStamina.bmp");
  ToolBeltLeatherRare := LoadBitmap(BitmapsFolder + "ToolBeltLeatherRare.bmp");
  LeatherBelt := LoadBitmap(BitmapsFolder + "LeatherBelt.bmp");
  Drink := LoadBitmap(BitmapsFolder + "Drink.bmp");
  WaterHighlighted := LoadBitmap(BitmapsFolder + "WaterHighlighted.bmp");
  Saddle := LoadBitmap(BitmapsFolder + "Saddle.bmp");
  LeatherBoot := LoadBitmap(BitmapsFolder + "LeatherBoot.bmp");
  LeatherGlove := LoadBitmap(BitmapsFolder + "LeatherGlove.bmp");
  LeatherJacket := LoadBitmap(BitmapsFolder + "LeatherJacket.bmp");
  LeatherPants := LoadBitmap(BitmapsFolder + "LeatherPants.bmp");
  LeatherSleeve := LoadBitmap(BitmapsFolder + "LeatherSleeve.bmp");
  LeatherCap := LoadBitmap(BitmapsFolder + "LeatherCap.bmp");
  LeatherBarding := LoadBitmap(BitmapsFolder + "leatherBarding.bmp");
  SmallChest := LoadBitmap(BitmapsFolder + "SmallChest.bmp");
  SmallChestHighlighted := LoadBitmap(BitmapsFolder + "SmallChestHighlighted.bmp");
  PickLock := LoadBitmap(BitmapsFolder + "PickLock.bmp");
  TextInput := LoadBitmap(BitmapsFolder + "TextInput.bmp");
  SmallPadlock := LoadBitmap(BitmapsFolder + "SmallPadlock.bmp");
  AttachLock := LoadBitmap(BitmapsFolder + "AttachLock.bmp");


  HasLockpickingTimerSet := false;
  wait(500);
  MoveMouse(110,810);
  wait(500);
  ClickMouse(110,810,mouse_Left);
  wait(1000);


  SleepBonusUsing := false;
  i := 0;
  waterCounter := 1;
  while true do
  begin
    NoLockpickSkillGain := DoLockpicking;
    while NoLockpickSkillGain do
    begin
      MoveMouse(300,300);
      wait(100);
      ClickMouse(300,300, mouse_Left);
      wait(500);
      if FindBitmapToleranceIn(SmallPadlock, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10) then
      begin
        MoveMouse(xTemp, yTemp);
        wait(300);
        ClickMouse(xTemp, yTemp, mouse_Left);
        wait(200);
        ClickMouse(xTemp, yTemp, mouse_Left);
        wait(400);
        MoveMouse(300,300);
        wait(500);
        if FindBitmapToleranceIn(SmallChest, xSmallChest, ySmallChest, 0, 0, clientWidth, clientHeight, 10) then
        begin
          MoveMouse(xSmallChest, ySmallChest);
          wait(300);
          ClickMouse(xSmallChest, ySmallChest, mouse_Right);
          wait(1000);
          if FindBitmapToleranceIn(AttachLock, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10) then
          begin
            MoveMouse(xTemp, yTemp);
            wait(400);
            ClickMouse(xTemp, yTemp, mouse_Left);
            wait(1000);
          end;
        end;
      end;
      FoundEnergyBar := FindBitmapToleranceIn(FullEnergyBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 20);
      FoundActiveActionBar := FindBitmapToleranceIn(ActiveActionBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
      while (NOT FoundEnergyBar) OR FoundActiveActionBar do
      begin
        wait(500);
        FoundEnergyBar := FindBitmapToleranceIn(FullEnergyBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 20);
        FoundActiveActionBar := FindBitmapToleranceIn(ActiveActionBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
      end;
      SkillsFile := OpenFile(WurmLogsFolder + "_Skills.2020-12.txt", true);
      if SkillsFile = -1 then
      begin
        WriteLn("Skills file not opening, terminating script");
        TerminateScript();
      end;
      SetFileCharPointer(SkillsFile, -300, 2); //set seek to certain number before end
      ReadFileString(SkillsFile, RecentSkillsString, 300);
      WriteLn(RecentSkillsString);
      LockpickingSkillGainedPos := pos('Lock picking',RecentSkillsString);
      if LockpickingSkillGainedPos < 11 then
      begin
        if NOT HasLockPickingTimerSet then
        begin
          TimeOfLockpickingString := "00:00:00";
        end;
      end else
      begin
        TimeOfLockpickingString := Copy(RecentSkillsString, LockpickingSkillGainedPos - 10, 8);
      end;
      LastLockpicked :=  StrToTime(TimeOfLockpickingString);
      WriteLn(LastLockpicked);
      HasLockpickingTimerSet := true;
      WriteLn(TimeToStr(Now() - LastLockpicked));
      CloseFile(SkillsFile);
      DecodeTime(Now() - LastLockpicked, HourTemp, MinTemp, SecTemp, MilliSecTemp);
      SecondsSinceLockpicked := HourTemp * 3600 + MinTemp * 60 + SecTemp;
      WriteLn(SecondsSinceLockpicked);
      if SecondsSinceLockpicked <= 570 then //9 min 30 seconds
      begin
        FoundTextInput := FindBitmapToleranceIn(TextInput, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
        if FoundTextInput then
        begin
          if ToggleSleepBonus then
          begin
            if SleepBonusUsing then
            begin
              MoveMouse(xTemp + random(0,5), yTemp);
              wait(500);
              ClickMouse(xTemp + random(0,5), yTemp, mouse_Left);
              wait(500);
              SendKeys("/fsleep" + chr(13), 100, 100);
              wait(500);
              MoveMouse(xSmallChest, ySmallChest);
              wait(500);
              ClickMouse(xSmallChest, ySmallChest, mouse_Left);
              wait(500);
              MoveMouse(200,200);
              SleepBonusUsing := NOT SleepBonusUsing;
            end;
          end;
        end;
        NoLockpickSkillGain := false;
      end else
      begin

        FoundSmallChest := FindBitmapToleranceIn(SmallChest, xSmallChest, ySmallChest, 0, 0, clientWidth, clientHeight, 5);
        if NOT FoundSmallChest then
        begin
          FoundSmallChest := FindBitmapToleranceIn(SmallChestHighlighted, xSmallChest, ySmallChest, 0, 0, clientWidth, clientHeight, 5);
        end;
        if FoundSmallChest then
        begin
          SendKeys("6", 100, 100);
          wait(500 + random(0,500));
          MoveMouse(xSmallChest + random(0,5), ySmallChest);
          wait(500);
          ClickMouse(xSmallChest + random(0,5), ySmallChest, mouse_Right);
          wait(2000 + random(0,500));
          FoundPickLock := FindBitmapToleranceIn(PickLock, xPickLock, yPickLock, 0, 0, clientWidth, clientHeight, 15);
          if FoundPickLock then
          begin
            MoveMouse(xPickLock + random(0,5), yPickLock);
            wait(500);
            ClickMouse(xPickLock + random(0,5), yPickLock, mouse_Left);
            wait(20000 + random(0,500));
            MoveMouse(200,200);
          end;
          FoundTextInput := FindBitmapToleranceIn(TextInput, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
          if FoundTextInput then
          begin
            if ToggleSleepBonus then
            begin
              if NOT SleepBonusUsing then
              begin
                MoveMouse(xTemp + random(0,5), yTemp);
                wait(500);
                ClickMouse(xTemp + random(0,5), yTemp, mouse_Left);
                wait(500);
                SendKeys("/fsleep" + chr(13), 100, 100);
                wait(500);
                MoveMouse(xSmallChest, ySmallChest);
                wait(500);
                ClickMouse(xSmallChest, ySmallChest, mouse_Left);
                wait(500);
                MoveMouse(200,200);
                SleepBonusUsing := NOT SleepBonusUsing;
              end;
            end;
          end;
        end;
      end;
    end;

    if waterCounter mod 90 = 0 then
    begin
      waterCounter := random(0,5);
      FoundHighlightedWater := FindBitmapToleranceIn(WaterHighlighted, xWater, yWater, 0, 0, clientWidth, clientHeight, 5);
      if FoundHighlightedWater then
      begin
        MoveMouse(xWater + random(0,5), yWater);
        wait(500);
        ClickMouse(xWater + random(0,5), yWater, mouse_Right);
        wait(1500 + random(0, 500));
        FoundDrink := FindBitmapToleranceIn(Drink, xDrink, yDrink, 0, 0, clientWidth, clientHeight, 10);
        if FoundDrink then
        begin
          MoveMouse(xDrink + 20+ random(0,5), yDrink);
          wait(500);
          ClickMouse(xDrink + 5 + random(0,5), yDrink, mouse_Left);
          wait(4000 + random(0, 1000));
        end else
        begin
          WriteLn("Drink option not found");
          TerminateScript();
        end;
      end else
      begin
        WriteLn("Water not found");
        TerminateScript();
      end;
    end;
    waterCounter := waterCounter + 1;
    foundInventoryTitle := FindBitmapToleranceIn(InventoryTitle, xInventoryLocation, yInventoryLocation,0,0,clientWidth,clientHeight,5);
    if foundInventoryTitle then
    begin
      if (NOT FindBitmapToleranceIn(LeatherHideOnToolBeltHighlighted, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 40)) AND (NOT FindBitmapToleranceIn(LeatherHideOnToolBelt, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 40)) then
      begin
        if FindBitmapToleranceIn(HighlightedLeatherStack, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 5) then
        begin
          MoveMouse(xTemp,yTemp);
          wait(100 + random(0,100));
          HoldMouse(xTemp,yTemp,mouse_Left);
          wait(200 + random(0,100));
          MoveMouse(xInventoryLocation + 50, yInventoryLocation + 50);
          wait(600 + random(0,100));
          ReleaseMouse(xInventoryLocation + 50, yInventoryLocation + 50, mouse_Left);
          wait(1000 + random(0,100));
          SendKeys("1" + chr(13), 100, 100);
          wait(1000 + random(0,600));
          if FindBitmapToleranceIn(Leather, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 10) OR FindBitmapToleranceIn(StartOfToolBelt, xToolBeltLocation, yToolBeltLocation, 0, 0, clientWidth, clientHeight, 10)  then
          begin
            MoveMouse(xTemp,yTemp);
            wait(300 + random(0,100));
            HoldMouse(xTemp,yTemp,mouse_Left);
            wait(300 + random(0,100));
            WriteLn("ToolBeltStart is ", xToolBeltLocation, " ", yToolBeltLocation);
            MoveMouse(xToolBeltLocation + 190, yToolBeltLocation + 10);
            wait(300 + random(0, 100));
            ReleaseMouse(xToolBeltLocation + 190, yToolBeltLocation + 10, mouse_Left);
            wait(1000);
          end else
          begin
            WriteLn("Leather or toolbelt not found, exiting");
            TerminateScript();
          end;
        end else
        begin
          WriteLn("Highlighted leather stack not found, exiting");
          TerminateScript();
        end;
      end;
      WriteLn("Found inventory at: ", xInventoryLocation, " ", yInventoryLocation);

      foundToolBeltLeather := FindBitmapToleranceIn(ToolBeltLeather, xToolBeltLeatherLocation, yToolBeltLeatherLocation, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5) OR foundToolBeltLeatherRare OR foundLeatherBelt;


      if NOT foundToolBeltLeather then
        yToolBeltLeatherLocation := 9000;

      foundTemp := FindBitmapToleranceIn(Saddle, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherBelt, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(ToolBeltLeatherRare, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherBoot, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherGlove, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherJacket, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherPants, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherSleeve, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherCap, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      foundTemp := FindBitmapToleranceIn(LeatherBarding, xTemp, yTemp, xInventoryLocation, yInventoryLocation, clientWidth, clientHeight, 5);
      if foundTemp then
        if yTemp < yToolBeltLeatherLocation then
          yToolBeltLeatherLocation := yTemp;

      if foundToolBeltLeather then
      begin
        WriteLn("Found toolbelt at: ", xToolBeltLeatherLocation, " ", yToolBeltLeatherLocation);
        foundNoDmg := FindBitmapToleranceIn(AwlIcon, xTemp, yTemp, xToolBeltLeatherLocation, yToolBeltLeatherLocation-5, clientWidth, yToolBeltLeatherLocation+5,2);
        foundIcon := FindBitmapToleranceIn(AwlIcon, xIconLocation, yIconLocation, xToolBeltLeatherLocation, yToolBeltLeatherLocation-7, clientWidth, yToolBeltLeatherLocation+10,7);
        if foundIcon then
        begin
          WriteLn("Found awl icon at: ", xIconLocation, " ", yIconLocation);
          SendKeys("1",20,20);
        end;
        foundIcon := FindBitmapToleranceIn(LeatherKnifeIcon, xIconLocation, yIconLocation, xToolBeltLeatherLocation, yToolBeltLeatherLocation-5, clientWidth, yToolBeltLeatherLocation+7,5);
        if foundIcon then
        begin
          WriteLn("Found leather knife icon at: ", xIconLocation, " ", yIconLocation);
          SendKeys("2",20,20);
        end;
        foundIcon := FindBitmapToleranceIn(MalletIcon, xIconLocation, yIconLocation, xToolBeltLeatherLocation, yToolBeltLeatherLocation-5, clientWidth, yToolBeltLeatherLocation+7,5);
        if foundIcon then
        begin
          WriteLn("Found mallet icon at: ", xIconLocation, " ", yIconLocation);
          SendKeys("3",20,20);
        end;
        foundIcon := FindBitmapToleranceIn(NeedleIcon, xIconLocation, yIconLocation, xToolBeltLeatherLocation, yToolBeltLeatherLocation-5, clientWidth, yToolBeltLeatherLocation+7,5);
        if foundIcon then
        begin
          WriteLn("Found needle icon at: ", xIconLocation, " ", yIconLocation);
          SendKeys("4",20,20);
        end;
        foundIcon := FindBitmapToleranceIn(LeatherIcon, xIconLocation, yIconLocation, xToolBeltLeatherLocation, yToolBeltLeatherLocation-5, clientWidth, yToolBeltLeatherLocation+7,5);
        if foundIcon then
        begin
          WriteLn("Found leather icon at: ", xIconLocation, " ", yIconLocation);
          SendKeys("5",20,20);
        end;
        wait(50+random(0,50));
        MoveMouse(xToolBeltLeatherLocation + random(0,20), yToolBeltLeatherLocation + random(0,2));
        wait(50+random(0,50));
        if NOT foundNoDmg then
          SendKeys("f",20,20);
        wait(50 + random(0,50));
        SendKeys("t",20,20);
        wait(200+random(0,100));
        MoveMouse(random(150,160),random(800,820));
        if NOT foundNoDmg then
          wait(4000);
        wait(1000+random(0,1000));
      end;
    end;
    FoundFirstHalfOfStamina := FindBitmapToleranceIn(FirstHalfOfStamina, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 20);
    FoundActiveActionBar := FindBitmapToleranceIn(ActiveActionBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
    while (NOT FoundFirstHalfOfStamina) OR FoundActiveActionBar do
    begin
      wait(500);
      FoundFirstHalfOfStamina := FindBitmapToleranceIn(FirstHalfOfStamina, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 20);
      FoundActiveActionBar := FindBitmapToleranceIn(ActiveActionBar, xTemp, yTemp, 0, 0, clientWidth, clientHeight, 10);
    end;
    i += 1;
    if i = 15 then
    begin
      i := random(0,3);
      foundQLTitle := FindBitmapToleranceIn(QLTitle, xQLTitle, yQLTitle, xInventoryLocation, yInventoryLocation, clientWidth, yInventoryLocation + 50,2);
      if foundQLTitle then
      begin
        MoveMouse(xQLTitle, yQLTitle);
        wait(50 + random(0,50));
        ClickMouse(xQLTitle, yQLTitle, mouse_Left);
        wait(100 + random(0,100));
        ClickMouse(xQLTitle, yQLTitle, mouse_Left);
        wait(1000 + random(0,500));
      end else
      begin
        WriteLn("QL Title not found, exiting");
        TerminateScript();
      end;
    end;
  end;
end.
